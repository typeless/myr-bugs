use std

type U2 = union
	`U2_1 int8
	`U2_2
;;

type S1 = struct
	t1_1: int[:]
	t1_2: int16
;;

type S0 = struct
	t0_1: U2
	t0_2: S1
	t0_3: int
;;

type u9 = union
	`A
	`B
	`C
;;
	
const main = {

	var v : S0 = [.t0_1 = `U2_2]
	match v
	| [.t0_1 =`U2_1 20 ]	: 100
	| _			: 200
	;;

//	match `std.Some (1, 3)
//	| `std.Some (1, 2)	: 1
//	| `std.Some (2, 4)	: 2
//	| `std.Some (4, 6)	: 3
//	| _			: 4
//	;;

//	match `A
//	| `A	: 1
//	| `B	: 2
//	| `C	: 3
//	| _	: 4
//	;;

//	match `std.None
//	| `std.Some 123: 1
//	| `std.None: 3
//	| _: 0
//	;;

//	match (`A, 0)
//	| (`A, 100) : 1
//	| (`B, 200) : 2
//	| (`C, 300) : 3
//	|  _ : 4
//	;;

//	match (100, (100))
//	| (100, (101))	: 1
//	| (200, (201))	: 2
//	| _		: 3
//	;;

//	match ('a', "bb")
//	| ('a',"")	: 1
//	| ('d', depth)	: 2
//	| ('s', "abc")	: 3
//	| _		: 4
//	;;

//	match ((1, 3), (2, 3))
//	| ((3, 5), (4, 5))	: 1
//	| ((5, 7), (6, 7))	: 2
//	| _		: 0
//	;;

//	match ((((1,2), 3), 4), 5)
//	| ((((11, 12), 13), 14), 16)	: 1
//	| _				: 0
//	;;

//	match ((0, (0,0)), 0)
//	| ((1, (2, 2)), 1)	: 1
//	| _			: 2
//	;;


//	match (1, 2, 3)
//	| (0, 0, 0): 1
//	| _	: 2
//	;;
//

//    match `std.Some (2, 2)
//    | `std.None         : 0
//    | _                 : 2
//    ;;

}
//    match (0, 0, 0)
//    | (0, 1, 3)  : 1
//    | (3, 4, _)  : 2
//    | _          : 3
//    ;;

//    match (0, 0)
//    | (1, 2): 1
//    | _     : 2
//    ;;

//    match (0, `std.None)
//    | (123, `std.Some 10): 0
//    | (123, `std.None)  : 1
//    | _                 : 2
//    ;;
//


// INTPUT
//	match (0, `std.None)
//	| (123, `std.Some 10): 0
//	| (123, `std.None)  : 1
//	| _                 : 2
//	;;
//
// OUTPUT
//	+ .L4 (Otup) -> accept:.L0 .any:(null) .next:[ ] .pat:[ ] end:[ ]
//	        + .L4 (Olit) -> accept:.L5 .any:(null) .next:[ ] .pat:[ ] end:[ ]
//	        - .any:(null) .next:[ .L5 ] .pat:[ Olit ] end:[ .L5 ]
//	        + .L5 (Oucon) -> accept:.L0 .any:(null) .next:[ ] .pat:[ ] end:[ ]
//	                + .L6 (Olit) -> accept:.L0 .any:(null) .next:[ ] .pat:[ ] end:[ ]
//	                - .any:(null) .next:[ .L0 ] .pat:[ Olit ] end:[ .L0 ]
//	        - .any:(null) .next:[ .L6 ] .pat:[ Olit ] end:[ .L0 ]
//	- .any:(null) .next:[ .L5 ] .pat:[ Olit ] end:[ .L0 ]
//	+ .L4 (Otup) -> accept:.L1 .any:(null) .next:[ .L5 ] .pat:[ Olit ] end:[ .L0 ]
//	        + .L4 (Olit) -> accept:.L7 .any:(null) .next:[ .L5 ] .pat:[ Olit ] end:[ ]
//	        - .any:(null) .next:[ .L5 ] .pat:[ Olit ] end:[ .L5 ]
//	        + .L5 (Oucon) -> accept:.L1 .any:(null) .next:[ .L6 ] .pat:[ Olit ] end:[ ]
//	        - .any:(null) .next:[ .L6 .L1 ] .pat:[ Olit Olit ] end:[ .L1 ]
//	- .any:(null) .next:[ .L5 ] .pat:[ Olit ] end:[ .L0 .L1 ]
//	+ .L4 (Ogap) -> accept:.L2 .any:(null) .next:[ .L5 ] .pat:[ Olit ] end:[ .L0 .L1 ]
//	        + .L4 (wildrec) -> accept:.L2 .any:(null) .next:[ .L5 ] .pat:[ Olit ] end:[ .L0 .L1 ]
//	                + .L4 (wildrec) -> accept:.L8 .any:(null) .next:[ .L5 ] .pat:[ Olit ] end:[ ]
//	                - .any:.L8 .next:[ .L5 ] .pat:[ Olit ] end:[ .L5 .L8 ]
//	                + .L5 (wildrec) -> accept:.L2 .any:(null) .next:[ .L6 .L1 ] .pat:[ Olit Olit ] end:[ ]
//	                        + .L6 (wildrec) -> accept:.L2 .any:(null) .next:[ .L0 ] .pat:[ Olit ] end:[ .L1 ]
//	                        - .any:.L2 .next:[ .L0 ] .pat:[ Olit ] end:[ .L1 .L0 .L2 ]
//	                - .any:.L2 .next:[ .L6 .L1 ] .pat:[ Olit Olit ] end:[ .L1 .L0 .L2 .L2 ]
//	                + .L8 (wildrec) -> accept:.L2 .any:(null) .next:[ ] .pat:[ ] end:[ .L1 .L0 .L2 .L2 ]
//	                - .any:.L2 .next:[ ] .pat:[ ] end:[ .L1 .L0 .L2 .L2 .L2 ]
//	        - .any:.L8 .next:[ .L5 ] .pat:[ Olit ] end:[ .L0 .L1 .L1 .L0 .L2 .L2 .L2 ]
//	- .any:.L8 .next:[ .L5 ] .pat:[ Olit ] end:[ .L0 .L1 .L1 .L0 .L2 .L2 .L2 ]



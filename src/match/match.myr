use std

const main = {

//	match `std.None
//	| `std.Some 123: 1
//	| `std.None: 3
//	| _: 0
//	;;


	match ('a', "bb")
	| ('a',"")	: 1
	| ('d', depth)	: 2
	| ('s', "")	: 3
	| _		: 4
	;;


//	match (1, 2, 3)
//	| (0, 0, 0): 1
//	| _	: 2
//	;;
//

//    match `std.Some (2, 2)
//    | `std.None         : 0
//    | _                 : 2
//    ;;

}
//    match (0, 0, 0)
//    | (0, 1, 3)  : 1
//    | (3, 4, _)  : 2
//    | _          : 3
//    ;;

//    match (0, 0)
//    | (1, 2): 1
//    | _     : 2
//    ;;

//    match (0, `std.None)
//    | (123, `std.Some 10): 0
//    | (123, `std.None)  : 1
//    | _                 : 2
//    ;;
//


// INTPUT
//	match (0, `std.None)
//	| (123, `std.Some 10): 0
//	| (123, `std.None)  : 1
//	| _                 : 2
//	;;
//
// OUTPUT
//	+ .L4 (Otup) -> accept:.L0 .any:(null) .next:[ ] .pat:[ ] end:[ ]
//	        + .L4 (Olit) -> accept:.L5 .any:(null) .next:[ ] .pat:[ ] end:[ ]
//	        - .any:(null) .next:[ .L5 ] .pat:[ Olit ] end:[ .L5 ]
//	        + .L5 (Oucon) -> accept:.L0 .any:(null) .next:[ ] .pat:[ ] end:[ ]
//	                + .L6 (Olit) -> accept:.L0 .any:(null) .next:[ ] .pat:[ ] end:[ ]
//	                - .any:(null) .next:[ .L0 ] .pat:[ Olit ] end:[ .L0 ]
//	        - .any:(null) .next:[ .L6 ] .pat:[ Olit ] end:[ .L0 ]
//	- .any:(null) .next:[ .L5 ] .pat:[ Olit ] end:[ .L0 ]
//	+ .L4 (Otup) -> accept:.L1 .any:(null) .next:[ .L5 ] .pat:[ Olit ] end:[ .L0 ]
//	        + .L4 (Olit) -> accept:.L7 .any:(null) .next:[ .L5 ] .pat:[ Olit ] end:[ ]
//	        - .any:(null) .next:[ .L5 ] .pat:[ Olit ] end:[ .L5 ]
//	        + .L5 (Oucon) -> accept:.L1 .any:(null) .next:[ .L6 ] .pat:[ Olit ] end:[ ]
//	        - .any:(null) .next:[ .L6 .L1 ] .pat:[ Olit Olit ] end:[ .L1 ]
//	- .any:(null) .next:[ .L5 ] .pat:[ Olit ] end:[ .L0 .L1 ]
//	+ .L4 (Ogap) -> accept:.L2 .any:(null) .next:[ .L5 ] .pat:[ Olit ] end:[ .L0 .L1 ]
//	        + .L4 (wildrec) -> accept:.L2 .any:(null) .next:[ .L5 ] .pat:[ Olit ] end:[ .L0 .L1 ]
//	                + .L4 (wildrec) -> accept:.L8 .any:(null) .next:[ .L5 ] .pat:[ Olit ] end:[ ]
//	                - .any:.L8 .next:[ .L5 ] .pat:[ Olit ] end:[ .L5 .L8 ]
//	                + .L5 (wildrec) -> accept:.L2 .any:(null) .next:[ .L6 .L1 ] .pat:[ Olit Olit ] end:[ ]
//	                        + .L6 (wildrec) -> accept:.L2 .any:(null) .next:[ .L0 ] .pat:[ Olit ] end:[ .L1 ]
//	                        - .any:.L2 .next:[ .L0 ] .pat:[ Olit ] end:[ .L1 .L0 .L2 ]
//	                - .any:.L2 .next:[ .L6 .L1 ] .pat:[ Olit Olit ] end:[ .L1 .L0 .L2 .L2 ]
//	                + .L8 (wildrec) -> accept:.L2 .any:(null) .next:[ ] .pat:[ ] end:[ .L1 .L0 .L2 .L2 ]
//	                - .any:.L2 .next:[ ] .pat:[ ] end:[ .L1 .L0 .L2 .L2 .L2 ]
//	        - .any:.L8 .next:[ .L5 ] .pat:[ Olit ] end:[ .L0 .L1 .L1 .L0 .L2 .L2 .L2 ]
//	- .any:.L8 .next:[ .L5 ] .pat:[ Olit ] end:[ .L0 .L1 .L1 .L0 .L2 .L2 .L2 ]


